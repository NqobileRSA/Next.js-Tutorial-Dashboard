# Next.js Tutorial

- What is Next.js?

  > An official react.js framework that allows to create `pre-rendered` react
  > web applications. Offers both server side rendering and static site
  > generation.

  <!-- ----------------------------------------------- -->

- What is it used for?

  > server side rendering : "websites are rendered in the server before served
  > to the client", static site generation : "a static html file is generated
  > for each page at build time, and served directly by the web server."

  <!-- ----------------------------------------------- -->

- Why should you use it?

  > Pre-rendering improves performance. Better search engine optimization.

  <!-- ----------------------------------------------- -->

- How is it different from React.js?
  > React uses client side rendering.

# Installation and setup

> Install node v10.01 + Open terminal on vscode. Run : `npx create-next-app`
> accept all the prompts.
> but for this project run: npx create-next-app@latest nextjs-dashboard --example "https://github.com/vercel/next-learn/tree/main/dashboard/starter-example" --use-pnpm

# Folder structure

| `app` : Contains all the routes, components, and logic for your application,
this is where you'll be mostly working from.

> layout.tsx : Defines the layout of your application, including headers,
> footers, and other shared components pages.tsx : contains react components
> that a rendered as individual pages, each page becomes a route. -`components`
> : reusable components within the application. | `public` : contains assests
> served statically directly by the web server (not processed by next.js) |
> `next.config.js` : configure the next app. | `package.json` : meta data and
> dependecies. | `lib` : third party libraries || custom libraries. | `utils` :
> helper functions || utility functions

# Styling 
  > styles can be added in the global.css file.
  > recommended practice is to add the styles on the global root file "layout.tsx"
  CSS Modules : allow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well.
  > when styling using css modules instead of tailwind, you can create the stylesheet in the app/ui/stylesheet.module.css and declare the styles, then you can target the element with (styles.className)
  - the clsx library can be used to toggle classnames dynamically ; 
  import clsx from 'clsx';
  
  export default function InvoiceStatus({ status }: { status: string }) {
    return (
      <span
        className={clsx(
          'inline-flex items-center rounded-full px-2 py-1 text-sm',
          {
            'bg-gray-100 text-gray-500': status === 'pending',
            'bg-green-500 text-white': status === 'paid',
          },
        )}
      >
      // ...
  )}

# Font optimization
 > the next/font file downloads the font at build time and hosts them with other static assets, meaning when the user visits the websites no additional request are made.

 - adding a font.
 > create a file named fonts.ts in /app/ui
 import { Inter } from 'next/font/google';
 export const inter = Inter({ subsets: ['latin'] });

 > add font in the body :
 <body className={`${inter.className} antialiased`}>{children}</body>

 # image optimization
 image optimization in next.js prevents up from manually : 
 > making images responsivs.
 > specifying different sizes in different devices.
 > lazy loading out of vp images etc
 | we can use the /next/image component to automatically optimise images.

 The <Image> Component is an extension of the HTML <img> tag, and comes with automatic image optimization, such as:

 Preventing layout shift automatically when images are loading.
 Resizing images to avoid shipping large images to devices with a smaller viewport.
 Lazy loading images by default (images load as they enter the viewport).
 Serving images in modern formats, like WebP and AVIF, when the browser supports it.


 # Creating layouts and pages
 - Nested Routing
 > next.js uses file-system routing, folders are used to create nested routes.
 > Each folder represent a route segment that maps to a URL

`page.tsx` is a special Next.js file that exports a React component, and it's required for the route to be accessible
> To create a route you have to create a directory, the directory name becomes
> the route name in the browser. Once the directory is created, the nested file
> must be page.[tsx,jsx,js,ts], this allows next.js to recognise the file as the
> root file for that
> Note: only the page.tsx is accessable as a route when nested, all other files will not be considered as routes.

> when nesting routes, created nested folder, in that folder create page.jsx and that will become a route.

# Creating the dashboard layout
- the layout.tsx is used to create shared UI between mutliple pages.
> layouts are a blueprint guide of how a page is structured.
> components added on the layout.tsx file will be persistent in all the peer pages, for example :
"if you add a footer in the layout.tsx file, all routes in that page will contain footer"
`Think of layout.tsx as a container that wraps your pages, providing a consistent structure and design. Any components you add to layout.tsx will be displayed on all pages that use this layout.`
> Benefit : once a layout is rendered, it is preserved then only the page.tsx files will re-render, this is refered to as partial re-rendering (Partial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved.)

- Root layout
> any ui added in the root layout will be shared across all pages of the application.
> it can be used to modify the html,body tages and the meta data of the application.