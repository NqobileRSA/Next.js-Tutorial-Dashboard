# Next.js Tutorial

- What is Next.js?

  > An official react.js framework that allows to create `pre-rendered` react
  > web applications. Offers both server side rendering and static site
  > generation.

  <!-- ----------------------------------------------- -->

- What is it used for?

  > server side rendering : "websites are rendered in the server before served
  > to the client", static site generation : "a static html file is generated
  > for each page at build time, and served directly by the web server."

  <!-- ----------------------------------------------- -->

- Why should you use it?

  > Pre-rendering improves performance. Better search engine optimization.

  <!-- ----------------------------------------------- -->

- How is it different from React.js?
  > React uses client side rendering.

# Installation and setup

> Install node v10.01 + Open terminal on vscode. Run : `npx create-next-app`
> accept all the prompts.
> but for this project run: npx create-next-app@latest nextjs-dashboard --example "https://github.com/vercel/next-learn/tree/main/dashboard/starter-example" --use-pnpm

# Folder structure

| `app` : Contains all the routes, components, and logic for your application,
this is where you'll be mostly working from.

> layout.tsx : Defines the layout of your application, including headers,
> footers, and other shared components pages.tsx : contains react components
> that a rendered as individual pages, each page becomes a route. -`components`
> : reusable components within the application. | `public` : contains assests
> served statically directly by the web server (not processed by next.js) |
> `next.config.js` : configure the next app. | `package.json` : meta data and
> dependecies. | `lib` : third party libraries || custom libraries. | `utils` :
> helper functions || utility functions

# Styling 
  > styles can be added in the global.css file.
  > recommended practice is to add the styles on the global root file "layout.tsx"
  CSS Modules : allow you to scope CSS to a component by automatically creating unique class names, so you don't have to worry about style collisions as well.
  > when styling using css modules instead of tailwind, you can create the stylesheet in the app/ui/stylesheet.module.css and declare the styles, then you can target the element with (styles.className)
  - the clsx library can be used to toggle classnames dynamically ; 
  import clsx from 'clsx';
  
  export default function InvoiceStatus({ status }: { status: string }) {
    return (
      <span
        className={clsx(
          'inline-flex items-center rounded-full px-2 py-1 text-sm',
          {
            'bg-gray-100 text-gray-500': status === 'pending',
            'bg-green-500 text-white': status === 'paid',
          },
        )}
      >
      // ...
  )}

# Pages and Routes

| File based routing : next.js uses files to create routes for the web
application.

> To create a route you have to create a directory, the directory name becomes
> the route name in the browser. Once the directory is created, the nested file
> must be page.[tsx,jsx,js,ts], this allows next.js to recognise the file as the
> root file for that
